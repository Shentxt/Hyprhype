(defwidget panel_launcher [] (box :class "button-bin launcher"
    (button :style "background-image: url('assets/lol.png');" 
        :class "button launcher"
        :onclick "rofi -show drun -theme ~/.config/rofi/themes/launcher.rasi &"
        (label :halign "center")
    )
))

(defwidget panel_workspaces [orientation] (box :class "button-bin"
    (eventbox :class "button workspaces"
        (box
            :space-evenly false
            :orientation orientation
            (for workspace in {workspaces.workspaces}
                (button
                    :class "workspace-btn ${workspace.id == workspaces.active ? "active" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                    :onclick "hyprctl dispatch workspace ${workspace.id}"
                    :valign "center"
                    (label :class "icon" :text {workspace.windows > 0 ? "${workspace.id == workspaces.active ? "󰮯" : ""}" : ""})
                )
            )
        )
    )
))

(defwidget panel_window [angle] (box :class "button-bin"
    (button :class "button window" 
        (label
            :visible {window != "null" ? true : false}
            :text {window}
            :angle angle)
    )
))

(defwidget panel_separator [orientation dots visible] (box
    :orientation orientation
    :class "separator"
    :space-evenly false
    :visible visible
    (for dot in dots
        (box :class "dot" :halign "center" :hexpand true :valign "center"))))

(defwidget controls_slider [control reveal value onchange icon orientation transition] (eventbox
    :onscroll "${EWW_CONFIG_DIR}/scripts/${control} {}"
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box
        :space-evenly false
        :orientation orientation
        (revealer
            :transition transition
            :duration "300ms"
            :reveal reveal
            :class "reveal"
            (eventbox :class "slider ${orientation}" (scale
                :orientation orientation
                :flipped {orientation == "v"}
                :value value
                :onchange onchange)))
        (label
            :class "${control} icon"
            :text icon)
    )
))

(defwidget controls_icon [control reveal value icon style angle orientation transition visible] (eventbox
    :visible visible
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box
        :space-evenly false
        :orientation orientation
        (revealer
            :transition transition
            :duration "300ms"
            :reveal reveal
            :class "reveal"
            (label
                :class "${style} ${control}"
                :angle angle
                :text value)
        )
        (label
            :class "${style} ${control} icon"
            :text icon)
    )
))

(defvar bluetooth_reveal false)
(defvar bt_speaker_reveal false)
(defvar mute_reveal false)
(defvar notifications_reveal false)
(defvar battery_reveal false)
(defvar network_reveal false)
(defvar volume_reveal false)
(defvar screen_reveal false)
(defwidget panel_controls [orientation] (box
    :class "controls"
    :orientation orientation
    :space-evenly false
    (controls_icon  
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "bluetooth"
        :reveal bluetooth_reveal
        :visible {bluetooth.state == "on"}
        :value {arraylength(bluetooth.connected_devices) == 0 ? "Disable" : bluetooth.connected_devices[0].name}
        :icon {bluetooth.icon}
        :style {bluetooth.state}
        :angle {orientation == "v" ? 90 : 0})
    (controls_icon 
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "bt_speaker"
        :reveal bt_speaker_reveal
        :visible {arraylength(bluetooth.connected_devices) > 0}
        :value {bluetooth.connected_devices[0].name}
        :icon {bluetooth.connected_devices[0].icon}
        :style ""
        :angle {orientation == "v" ? 90 : 0})
    (controls_icon
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "mute"
        :reveal mute_reveal
        :visible {volume.mute.state == "on"}
        :value "Muted"
        :icon {volume.mute.icon}
        :style ""
        :angle {orientation == "v" ? 90 : 0})
    (controls_slider
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "volume"
        :reveal volume_reveal
        :value {volume.level}
        :onchange "${EWW_CONFIG_DIR}/scripts/volume set {}"
        :icon {volume.icon})
    (controls_slider
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "screen"
        :reveal screen_reveal
        :value {brightness.screen.level}
        :onchange "${EWW_CONFIG_DIR}/scripts/brightness set_screen {}"
        :icon {brightness.screen.icon})
    (controls_icon
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "network"
        :reveal network_reveal
        :visible true
        :value {network.wifi.ssid}
        :icon {network[network.primary].icon}
        :style {network[network.primary].style}
        :angle {orientation == "v" ? 90 : 0}) 
    (controls_icon
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "battery"
        :reveal battery_reveal
        :visible {battery.availabe}
        :value {battery.percent}
        :icon {battery.icon}
        :style {battery.state}
        :angle 0)
    (controls_icon
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "notifications"
        :reveal notifications_reveal
        :visible true
        :value {notifications.count}
        :icon {notifications.icon}
        :style {notifications.count > 0 ? "active" : ""}
        :angle 0)
))

(defwidget panel_system_indicators [orientation] (box :class "button-bin"
    (eventbox
        :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu quicksettings"
        :class "button system-indicators"
        (panel_controls :orientation orientation)
    )
))

(defwidget panel_powermenu [] (box :class "button-bin powermenu" 
(button :style "background-image: url('assets/power.png');"  
    :class "button powermenu"
    :onclick "~/.config/hypr/scripts/powermenu &"
)))

(defwidget panel_clock [] (box :class "button-bin"
    (button
        :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu calendar"
        :class "button clock"
        (box
            :space-evenly false
            :orientation "v"
            (label :text hour :class "hour")
             (box :class "timebox" :spacing 4
      (box :class "timebox magenta" "")
      (box :class "timebox green" "")
      (box :class "timebox yellow" "")
    )
    (label :text minutes :class "minutes")
        )
    )
))

(defwidget panel_media [] 
(box
    :orientation "v"
    :class "media"
    :space-evenly false
    :visible {arraylength(media.players) > 0}
    (box
        :space-evenly false
        :orientation "v"
        :class "controls button-bin"
        :visible {media.preferred != "null"}
        (button
            :class "player"
            :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu media"
            :onrightclick "${EWW_CONFIG_DIR}/scripts/player ${media.preferred.name} play-pause"
            :onscroll "${EWW_CONFIG_DIR}/scripts/player ${media.preferred.name} {}"
            (label :class "icon ${media.preferred.name}"
                   :text {media.preferred.icon}))
    )
))
