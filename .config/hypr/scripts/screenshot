#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
# ███████╗ ██████╗██████╗ ███████╗███████╗███╗   ██╗███████╗██╗  ██╗ ██████╗ ████████╗
# ██╔════╝██╔════╝██╔══██╗██╔════╝██╔════╝████╗  ██║██╔════╝██║  ██║██╔═══██╗╚══██╔══╝
# ███████╗██║     ██████╔╝█████╗  █████╗  ██╔██╗ ██║███████╗███████║██║   ██║   ██║
# ╚════██║██║     ██╔══██╗██╔══╝  ██╔══╝  ██║╚██╗██║╚════██║██╔══██║██║   ██║   ██║
# ███████║╚██████╗██║  ██║███████╗███████╗██║ ╚████║███████║██║  ██║╚██████╔╝   ██║
# ╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝ ╚═════╝    ╚═╝
#
# Autor = Shen Blaskowitz
# Inspiration = https://github.com/adi1090x
# Follow Me = https://github.com/Shentxt
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#                 Executed Screenshot
#
# a simple screenshot script
#
# required to function
# --------------------
# grimblast: screenshot
# swaimg: show screen
# notify-send: notify
# wl-copy: copy img
# wofi: launch script
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import
DIR="$HOME/.config"
RASI="$DIR/rofi/themes/screenshot.rasi"

# Theme Elements
prompt='Screenshot'
mesg="Directory :: $(xdg-user-dir PICTURES)/Screenshots"

# Options
layout=$(cat ${RASI} | grep 'USE_ICON' | cut -d'=' -f2)
if [[ "$layout" == 'NO' ]]; then
	option_1=" Capture Desktop"
	option_2=" Capture Area"
	option_3=" Capture Window"
	option_4=" Capture in 5s"
	option_5=" Capture in 10s"
else
	option_1=""
	option_2=""
	option_3=""
	option_4=""
	option_5=""
fi

# Rofi CMD
wofi_cmd() {
    wofi --show dmenu \ 
		-p "$prompt" \
		-mesg "$mesg" 
}

# Pass variables to rofi dmenu
run_wofi() {
	echo -e "$option_1\n$option_2\n$option_3\n$option_4\n$option_5" | wofi_cmd
}

# Screenshot
time=$(date +%Y-%m-%d-%H-%M-%S)
geometry=$(xrandr | grep 'current' | head -n1 | cut -d',' -f2 | tr -d '[:blank:],current')
dir="$(xdg-user-dir PICTURES)/Screenshots"
file="Screenshot_${time}_${geometry}.png"

# Directory
if [[ ! -d "$dir" ]]; then
	mkdir -p "$dir"
fi

# notify and view screenshot
notify_view() {
	notify_cmd_shot='notify-send "Cortana" "John, the suit has been reloaded successfully." -i ~/.config/hypr/assets/icons/refresh.png'
	${notify_cmd_shot} "$file."
	paplay ~/.config/hypr/assets/effects/screenshot.ogg &>/dev/null &
	swayimg "${dir}/${file}"
	if [[ -e "${dir}/${file}" ]]; then
		${notify_cmd_shot} "Screenshot Saved."
	else
		${notify_cmd_shot} "Screenshot Deleted."
	fi
}

# Copy screenshot to clipboard
copy_shot() {
	grimblast save output "${dir}/${file}" && xclip -selection clipboard -t image/png -i "${dir}/${file}"
}

# countdown
countdown() {
	for sec in $(seq "$1" -1 1); do
		notify-send "Taking shot in : $sec" -i ~/.config/hypr/assets/icons/clock.png
		sleep 1
	done
}

# take shots
shotnow() {
	sleep 1 && cd "${dir}" && sleep 0.5 && grimblast save output "${file}" | copy_shot
	notify_view
}

shot5() {
	countdown '5'
	sleep 1 && cd "${dir}" && grimblast save output "${file}" | copy_shot
	notify_view
}

shot10() {
	countdown '10'
	sleep 1 && cd "${dir}" && grimblast save output "${file}" | copy_shot
	notify_view
}

shotwin() {
	sleep 1 && cd "${dir}" && grimblast save active "${file}" | copy_shot
	notify_view
}

shotarea() {
	sleep 1 && cd "${dir}" && grimblast save area "${file}" | copy_shot
	notify_view
}

# Execute Command
run_cmd() {
	if [[ "$1" == '--opt1' ]]; then
		shotnow
	elif [[ "$1" == '--opt2' ]]; then
		shotarea
	elif [[ "$1" == '--opt3' ]]; then
		shotwin
	elif [[ "$1" == '--opt4' ]]; then
		shot5
	elif [[ "$1" == '--opt5' ]]; then
		shot10
	fi
}

# Actions
chosen="$(run_wofi)"
case ${chosen} in
$option_1)
	run_cmd --opt1
	;;
$option_2)
	run_cmd --opt2
	;;
$option_3)
	run_cmd --opt3
	;;
$option_4)
	run_cmd --opt4
	;;
$option_5)
	run_cmd --opt5
	;;
esac
